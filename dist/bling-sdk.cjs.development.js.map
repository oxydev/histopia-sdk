{"version":3,"file":"bling-sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/entities/tradePool.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["/*\n *   Copyright (c) 2022 \n *   All rights reserved.\n */\nimport JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  KOVAN = 42,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  FANTOM = 250,\n  FANTOM_TESTNET = 4002,\n  XDAI = 100,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  ARBITRUM = 79377087078960,\n  MOONBASE = 1287,\n  AVALANCHE = 43114,\n  FUJI = 43113,\n  OKCHAIN_TEST = 65,\n  OKCHAIN = 66,\n  HECO = 128,\n  HECO_TESTNET = 256,\n  OASISETH_MAIN = 42262,\n  OASISETH_TEST = 42261,\n  BOBA_MAIN = 288,\n  BOBA_TEST = 28,\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const INIT_CODE_HASH: string = '0xe2467c20c6243763382fb86ef0a72d8f4924d05ba449ff1b905596ab28b60003'\n\n\nexport const FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n  [ChainId.ROPSTEN]: '0x580763d106d6382bc5B31Bd0a00F6a68633639d7',\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.MATIC_TESTNET]: '0x68af29e8bcba294248a7ba7a451faf1e8740c33c',\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKCHAIN_TEST]: '0x5d7a9e3FA7F5f7A525b3de91c2Bb0deF9eBC7A14',\n  [ChainId.OKCHAIN]: '0x65728c1d0e545db117940d5745089c256516ad43',\n  [ChainId.FUJI]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0xb0b670fc1f7724119963018db0bfa86adb22d941 ',\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OASISETH_MAIN] :'0xa7200334f652425A12BF2f7e4F0F5409CCA4d963',\n  [ChainId.OASISETH_TEST] :'0x72A2937B8eedBF6F0b6d110F0E0Ff2f613ED2f08',\n  [ChainId.BOBA_MAIN] :'',\n  [ChainId.BOBA_TEST] :'',\n}\n\nexport const ROUTER_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ROPSTEN]: '0x29Ca94Ec11DBf747fDf6fF8E6008Ea6cc284F9Ca',\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.MATIC_TESTNET]: '0xa05BE3A2207efc5A56df08562F6170AE2710e9B9',\n  [ChainId.XDAI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef',\n  [ChainId.AVALANCHE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FUJI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKCHAIN_TEST]: '0x2345e3C7E809e90b20d9E94D2507374c6D11d853',\n  [ChainId.OKCHAIN]: '0x9F843d9BA2A386BDA2845507450Fd47934fb3D03',\n  [ChainId.HECO]: '0xed7d5f38c79115ca12fe6c0041abb22f0a06c300',\n  [ChainId.HECO_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OASISETH_MAIN] :'0x543d97779ca53d7b4355cA013C853D86B7F558d9',\n  [ChainId.OASISETH_TEST] :'0x36F169362228C73629Ed22512792eA5FB2cD8c2a',\n  [ChainId.BOBA_MAIN] :'',\n  [ChainId.BOBA_TEST] :'',\n}\n\n\n\n\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\n\n\nexport const ZOO_SWAP_MINING_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n  [ChainId.ROPSTEN]: '0x919056B376eef61594B168Dcd4435134c24Cdf07',\n  [ChainId.OASISETH_MAIN]: '0xe63BBe4ef29BFFc40Fa6aE337ca2E532C9A30224',\n  [ChainId.OKCHAIN_TEST]: '0x034Ce8C07ED998008BD5C9053485B791C79f79d0' ,\n  [ChainId.OASISETH_TEST]: '0x00b3111dD70582544D7594C31459532Ce6dd3d11',\n}\n\n\nexport const ZOO_PARK_EXT_PID: { [chainId in ChainId]?: number } = {\n  [ChainId.MAINNET]: 0,\n  [ChainId.ROPSTEN]: 0,\n  [ChainId.OASISETH_MAIN]: -1,\n  [ChainId.OKCHAIN_TEST]:0,\n  [ChainId.OASISETH_TEST]: 4\n}\nexport const ZOO_PARK_EXT_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n  [ChainId.ROPSTEN]: '0x480b021bdCFf73BBe8541E4D389Ca6b25d1e0907',\n  [ChainId.OASISETH_MAIN]: '0x86B8BD817048946958BdAEFa880E9AD297912fcc',\n  [ChainId.OKCHAIN_TEST]: '0x5CEDe17DCb104BaC72C86818ad56D683646a5b7a',\n  [ChainId.OASISETH_TEST]: '0xAEc94E047e426D4997875E98BbF81109b222f443',\n}\n\nexport const ZOO_ZAP_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n  [ChainId.ROPSTEN]: '0x480b021bdCFf73BBe8541E4D389Ca6b25d1e0907',\n  [ChainId.OASISETH_MAIN]: '0xe011720ae77469Ab74074D3f783Bf10f369F8761',\n  [ChainId.OKCHAIN_TEST]: '0x5CEDe17DCb104BaC72C86818ad56D683646a5b7a',\n  [ChainId.OASISETH_TEST]: '0xbF35fEec746C7F3AE0D9cee14Cc300C55EB250A1',\n}\n\n\n\n\n\n\nexport const ZOO_MINI_PARK_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n  [ChainId.ROPSTEN]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n  [ChainId.OASISETH_MAIN]: '0x0B668864676DF56Bb1db54f61bF1FB1131Bc0f86',\n  [ChainId.OKCHAIN_TEST]: '0xd3e9C63A986A817df4626283e5e0a6B37805386C',\n  [ChainId.OASISETH_TEST]: '0xEBc2d9e7C783f85284CD445BA52E7e80da47F5fa',\n}\n\n\n//No use \nexport const MASTERCHEF_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n  [ChainId.ROPSTEN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.RINKEBY]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.KOVAN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '0x88a22a53d94e276e4dce0320cecf48c1c559e522',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.HECO]: '',\n  [ChainId.OKCHAIN_TEST]: '',\n  [ChainId.OKCHAIN]: '',\n  [ChainId.OASISETH_MAIN] :'0x05243Bd7778a9D5556AFC98Ae9D222Cdf5E7C704',\n  [ChainId.OASISETH_TEST] :'',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.BOBA_MAIN] :'',\n  [ChainId.BOBA_TEST] :'',\n}\n\nexport const BAR_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272',\n  [ChainId.ROPSTEN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.RINKEBY]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.KOVAN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.OKCHAIN_TEST]: '',\n  [ChainId.OKCHAIN]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.HECO]: '',\n  [ChainId.OASISETH_MAIN] :'0x25070fA2244b41EA39B964DBFA9E0ab70A886e72',\n  [ChainId.OASISETH_TEST] :'',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.BOBA_MAIN] :'',\n  [ChainId.BOBA_TEST] :'',\n}\n\nexport const MAKER_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\n  [ChainId.ROPSTEN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.RINKEBY]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.KOVAN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.OKCHAIN_TEST]: '',\n  [ChainId.OKCHAIN]: '',\n  [ChainId.HECO]: '',\n  [ChainId.OASISETH_MAIN] :'',\n  [ChainId.OASISETH_TEST] :'',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.BOBA_MAIN] :'',\n  [ChainId.BOBA_TEST] :'',\n}\n\nexport const TIMELOCK_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.KOVAN]: '',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.OKCHAIN_TEST]: '',\n  [ChainId.OKCHAIN]: '',\n  [ChainId.HECO]: '',\n  [ChainId.OASISETH_MAIN] :'',\n  [ChainId.OASISETH_TEST] :'',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.BOBA_MAIN] :'',\n  [ChainId.BOBA_TEST] :'',\n}","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { ChainId, SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  public static readonly BNB: Currency = new Currency(18, 'BNB', 'Binance Coin')\n\n  public static readonly FTM: Currency = new Currency(18, 'FTM', 'Fantom')\n\n  public static readonly MATIC: Currency = new Currency(18, 'MATIC', 'Matic')\n\n  public static readonly XDAI: Currency = new Currency(18, 'XDAI', 'xDai')\n\n  public static readonly GLMR: Currency = new Currency(18, 'GLMR', 'Glimmer')\n\n  public static readonly AVAX: Currency = new Currency(18, 'AVAX', 'Avalanche')\n\n  public static readonly HT: Currency = new Currency(18, 'HT', 'Heco Token')\n\n  public static readonly OKT: Currency = new Currency(18, 'OKT', 'OKchain Token')\n\n  public static readonly ROSE: Currency = new Currency(18, 'ROSE', 'ROSE Token')\n\n  public static readonly NATIVE = {\n    [ChainId.MAINNET]: Currency.ETHER,\n    [ChainId.ROPSTEN]: Currency.ETHER,\n    [ChainId.RINKEBY]: Currency.ETHER,\n    [ChainId.GÖRLI]: Currency.ETHER,\n    [ChainId.KOVAN]: Currency.ETHER,\n    [ChainId.FANTOM]: Currency.FTM,\n    [ChainId.FANTOM_TESTNET]: Currency.FTM,\n    [ChainId.MATIC]: Currency.MATIC,\n    [ChainId.MATIC_TESTNET]: Currency.MATIC,\n    [ChainId.XDAI]: Currency.XDAI,\n    [ChainId.BSC]: Currency.BNB,\n    [ChainId.BSC_TESTNET]: Currency.BNB,\n    [ChainId.ARBITRUM]: Currency.ETHER,\n    [ChainId.MOONBASE]: Currency.GLMR,\n    [ChainId.AVALANCHE]: Currency.AVAX,\n    [ChainId.OKCHAIN_TEST]: Currency.OKT,\n    [ChainId.OKCHAIN]: Currency.OKT,\n    [ChainId.FUJI]: Currency.AVAX,\n    [ChainId.HECO]: Currency.HT,\n    [ChainId.OASISETH_MAIN]: Currency.ROSE,\n    [ChainId.OASISETH_TEST]: Currency.ROSE,\n    [ChainId.HECO_TESTNET]: Currency.HT\n  }\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  public static getNativeCurrency(chainId?: ChainId) {\n    if (!chainId) {\n      throw Error(`No chainId ${chainId}`)\n    }\n\n    if (!(chainId in Currency.NATIVE)) {\n      throw Error(`No native currency defined for chainId ${chainId}`)\n    }\n    \n    return Currency.NATIVE[chainId]\n  }\n\n  public static getNativeCurrencySymbol(chainId?: ChainId) {\n    const nativeCurrency = this.getNativeCurrency(chainId)\n    return nativeCurrency.symbol\n  }\n\n  public static getNativeCurrencyName(chainId?: ChainId) {\n    const nativeCurrency = this.getNativeCurrency(chainId)\n    return nativeCurrency.name\n  }\n\n  public getSymbol(chainId?: ChainId) {\n    if (!chainId) {\n      return this?.symbol\n    }\n\n    \n    if (this?.symbol === 'ETH') {      \n      return Currency.getNativeCurrencySymbol(chainId)\n    }\n    \n\n    if (this?.symbol === 'WETH') {\n      return `W${Currency.getNativeCurrencySymbol(chainId)}`\n    }\n      \n    return this?.symbol\n  }\n\n  public getName(chainId?: ChainId) {\n    if (!chainId) {\n      return this?.name\n    }\n\n    if (this?.name === 'Ether') {\n      return Currency.getNativeCurrencyName(chainId)\n    }\n\n    return this?.name\n  }\n}\n\nconst ETHER = Currency.ETHER\n\nfunction IsNative(currency:Currency):Boolean{\n return Object.values(Currency.NATIVE).indexOf(currency) != -1\n}\n\nexport { ETHER ,IsNative}\n","/*\n *   Copyright (c) 2022 \n *   All rights reserved.\n */\nimport invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\nexport const SUSHI = {\n  [ChainId.MAINNET]:{\n    BLING: new Token(ChainId.OASISETH_MAIN, '0x72Ad551af3c884d02e864B182aD9A34EE414C36C', 18, 'BLING', 'BLING')\n  }\n}\nexport const DefaultChainToken = {\n  [ChainId.MAINNET]: {},\n  [ChainId.ROPSTEN]: {\n    DAI: new Token(ChainId.ROPSTEN, '0xaD6D458402F60fD3Bd25163575031ACDce07538D', 18, 'DAI', 'DAI'),\n    ZOO: new Token(ChainId.ROPSTEN, '0x5750A66848aC18b9b61c5870C5f4d37EDB60c8AF', 18, 'ZOO', 'ZOO'),\n    ROSE: new Token(ChainId.ROPSTEN, '0xD647d75154cF0616Ba06Af944E7e602F8AE75086', 9, 'ROSE', 'ROSE'),\n    USDT: new Token(ChainId.ROPSTEN, '0xcA8A7B55A04A9fdE7Ae7bf128384fa330F81A19c', 12, 'USDT', 'USDT'),\n    BTC: new Token(ChainId.ROPSTEN, '0xe6c87C360C24EfC6FEf4DCeFeD5607b0adaCf936', 15, 'BTC', 'BTC'),\n    ETH: new Token(ChainId.ROPSTEN, '0xf72C1522a1d430464f194295bC3EF0f2F479459D', 18, 'ETH', 'ETH'),\n  },\n  [ChainId.OKCHAIN]: {\n    USDT: new Token(ChainId.OKCHAIN_TEST, '0x382bB369d343125BfB2117af9c149795C6C65C50', 18, 'USDT', 'USDT'),\n    OKB: new Token(ChainId.OKCHAIN_TEST, '0xdF54B6c6195EA4d948D03bfD818D365cf175cFC2', 18, 'OKB', 'OKB'),\n    ETHK: new Token(ChainId.OKCHAIN_TEST, '0xEF71CA2EE68F45B9Ad6F72fbdb33d707b872315C', 18, 'ETHK', 'ETHK'),\n    BTC: new Token(ChainId.OKCHAIN_TEST, '0x54e4622DC504176b3BB432dCCAf504569699a7fF', 18, 'BTC', 'BTC'),\n    WOKT: new Token(ChainId.OKCHAIN_TEST, '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15', 18, 'WOKT', 'WOKT'),\n  },\n  [ChainId.OKCHAIN_TEST]: {\n    BTC: new Token(ChainId.OKCHAIN_TEST, '0x09973e7e3914EB5BA69C7c025F30ab9446e3e4e0', 10, 'BTC', 'BTC'),\n    USDT: new Token(ChainId.OKCHAIN_TEST, '0xe579156f9dEcc4134B5E3A30a24Ac46BB8B01281', 10, 'USDT', 'USDT'),\n    ETHK: new Token(ChainId.OKCHAIN_TEST, '0xDF950cEcF33E64176ada5dD733E170a56d11478E', 10, 'ETHK', 'ETHK'),\n    WOKT: new Token(ChainId.OKCHAIN_TEST, '0x70c1c53E991F31981d592C2d865383AC0d212225', 18, 'WOKT', 'WOKT'),\n    OKB: new Token(ChainId.OKCHAIN_TEST, '0xDa9d14072Ef2262c64240Da3A93fea2279253611', 10, 'OKB', 'OKB'),\n    ZOO: new Token(ChainId.OKCHAIN_TEST, '0xd56F1F930760BD93871B96E36CDB5dda7d3D7108', 18, 'ZOO', 'ZOO'),\n  },\n  [ChainId.MATIC_TESTNET]: {\n    BTC: new Token(ChainId.MATIC_TESTNET, '0xafacf8468d769208d4a1c84d4ea63320fd75ffaa', 18, 'BTC', 'BTC'),\n    USDT: new Token(ChainId.MATIC_TESTNET, '0xfcf1fa21fa89b2fb50b77a621b3fe38233401a29', 18, 'USDT', 'USDT'),\n  },\n\n  [ChainId.OASISETH_MAIN]: {\n    ETH: new Token(ChainId.OASISETH_MAIN, '0x3223f17957Ba502cbe71401D55A0DB26E5F7c68F', 18, 'wETH', 'wETH'),\n    USDT: new Token(ChainId.OASISETH_MAIN, '0xdC19A122e268128B5eE20366299fc7b5b199C8e3', 6, 'weUSDT', 'weUSDT'),\n    YUZU: new Token(ChainId.OASISETH_MAIN, '0xf02b3e437304892105992512539F769423a515Cb', 18, 'YUZU', 'YUZUToken'),\n    PETAL: new Token(ChainId.OASISETH_MAIN, '0x2736643C7fFFe186984f60a2d34b91b1b7398bF1', 18, 'PETAL', 'PETAL'),\n    TULIP: new Token(ChainId.OASISETH_MAIN, '0x9e832CaE5d19e7ff2f0D62881D1E33bb16Ac9bdc', 18, 'TULIP', 'TULIP'),\n    DUNE: new Token(ChainId.OASISETH_MAIN, '0xaC5487bFE2502eCc06e057912b6F4946471093b9', 18, 'DUNE', 'Duneswap Token'),\n    WBTC: new Token(ChainId.OASISETH_MAIN, '0xd43ce0aa2a29DCb75bDb83085703dc589DE6C7eb', 8, 'WBTC', 'Wrapped BTC'),\n    //BLING: new Token(ChainId.OASISETH_MAIN, '0xf02b3e437304892105992512539F769423a515Cb', 18, 'BLING', 'BLING'),\n  },\n  [ChainId.HECO]: {\n    ETH: new Token(ChainId.HECO, '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD', 18, 'ETH', 'ETH'),\n    HBTC: new Token(ChainId.HECO, '0x66a79D23E58475D2738179Ca52cd0b41d73f0BEa', 18, 'HBTC', 'HBTC'),\n    USDT: new Token(ChainId.HECO, '0xa71EdC38d189767582C38A3145b5873052c3e47a', 10, 'USDT', 'USDT'),\n    WHT: new Token(ChainId.HECO, '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F', 18, 'WHT', 'WHT'),\n    HUSD: new Token(ChainId.HECO, '0x0298c2b32eaE4da002a15f36fdf7615BEa3DA047', 8, 'HUSD', 'HUSD'),\n    MDX: new Token(ChainId.HECO, '0x25D2e80cB6B86881Fd7e07dd263Fb79f4AbE033c', 18, 'MDX', 'MDX'),\n    BAG:   new Token(ChainId.HECO, '0xa042fb0e60125A4022670014AC121931e7501Af4',18),\n    HFIL:   new Token(ChainId.HECO, '0xae3a768f9aB104c69A7CD6041fE16fFa235d1810',18),\n    HLTC:   new Token(ChainId.HECO, '0xecb56cf772B5c9A6907FB7d32387Da2fCbfB63b4',18),\n    BXH:   new Token(ChainId.HECO, '0xcBD6Cb9243d8e3381Fea611EF023e17D1B7AeDF0',18),\n    TRIBE:   new Token(ChainId.HECO, '0x38999Fa3a7320bD2c3609BF0f8cB5CD4C11D3Fe1',18),\n    AAVE:   new Token(ChainId.HECO, '0x202b4936fE1a82A4965220860aE46d7d3939Bb25',18),\n    UNI:   new Token(ChainId.HECO, '0x22C54cE8321A4015740eE1109D9cBc25815C46E6',18),\n    FEI:   new Token(ChainId.HECO, '0x485cdBFF08A4F91a16689E73893a11ae8B76af6D',18),\n    SNX:   new Token(ChainId.HECO, '0x777850281719d5a96C29812ab72f822E0e09F3Da',18),\n    YFI:   new Token(ChainId.HECO, '0xB4F019bEAc758AbBEe2F906033AAa2f0F6Dacb35',18),\n    LINK:   new Token(ChainId.HECO, '0x9e004545c59D359F6B7BFB06a26390b087717b42',18),\n    MAKER:   new Token(ChainId.HECO, '0x34D75515090902a513F009f4505A750efaaD63b0',18),\n    COMP:   new Token(ChainId.HECO, '0xCe0A5CA134fb59402B723412994B30E02f083842',18),\n    BAL:   new Token(ChainId.HECO, '0x045De15Ca76e76426E8Fc7cba8392A3138078D0F',18),\n  },\n  [ChainId.OASISETH_TEST]: {\n    ETH: new Token(ChainId.OASISETH_TEST, '0xB38C1c2b5b0963428642eC55a320b429f21E180C', 18, 'ETH', 'ETH'),\n    USDT: new Token(ChainId.OASISETH_TEST, '0xC584fFD011e16A10fd8329853B9B8DE6E0313AD9', 18, 'USDT', 'USDT'),\n    BTC: new Token(ChainId.OASISETH_TEST, '0x961C7a3f1909243C9af056Fd11EdDa2e18b35C7b', 18, 'BTC', 'BTC')\n    },\n}\n// In reality this is a map of the wrapped version of the native token for a given network.\n// TODO: Rename to WNATIVE for sanity\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83', 18, 'WFTM', 'Wrapped FTM'),\n  [ChainId.FANTOM_TESTNET]: new Token(\n    ChainId.FANTOM_TESTNET,\n    '0xf1277d1Ed8AD466beddF92ef448A132661956621',\n    18,\n    'FTM',\n    'Wrapped FTM'\n  ),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x9b506afc4765af3f4af8458cab17eedd546fa01e',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d', 18, 'WXDAI', 'Wrapped xDai'),\n  [ChainId.BSC]: new Token(ChainId.BSC, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.ARBITRUM]: new Token(\n    ChainId.ARBITRUM,\n    '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.MOONBASE]: new Token(\n    ChainId.MOONBASE,\n    '0xe73763DB808ecCDC0E36bC8E32510ED126910394',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.AVALANCHE]: new Token(\n    ChainId.AVALANCHE,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.FUJI]: new Token(ChainId.FUJI, '0xd00ae08403B9bbb9124bB305C09058E32C39A48c', 18, 'WAVAX', 'Wrapped AVAX'),\n  [ChainId.HECO]:   DefaultChainToken[ChainId.HECO].WHT,\n  [ChainId.HECO_TESTNET]: new Token(\n    ChainId.HECO_TESTNET,\n    '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.OKCHAIN_TEST]:  DefaultChainToken[ChainId.OKCHAIN_TEST].WOKT,\n  [ChainId.OKCHAIN]: DefaultChainToken[ChainId.OKCHAIN_TEST].WOKT,\n  [ChainId.OASISETH_MAIN]: new Token(\n    ChainId.OASISETH_MAIN,\n    '0x21C718C22D52d0F3a789b752D4c2fD5908a8A733',\n    18,\n    'wROSE',\n    'Wrapped ROSE'\n  ),\n  [ChainId.OASISETH_TEST]: new Token(\n    ChainId.OASISETH_TEST,\n    '0x792296e2a15e6Ceb5f5039DecaE7A1f25b00B0B0',\n    18,\n    'wROSE',\n    'Wrapped ROSE'\n  ),\n}\n\n\nexport const SUSHI_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.GÖRLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.MOONBASE]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.FUJI]: '',\n  [ChainId.OKCHAIN_TEST]: DefaultChainToken[ChainId.OKCHAIN_TEST].ZOO.address,\n  [ChainId.OKCHAIN]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '',\n  [ChainId.OASISETH_MAIN]: '0x72Ad551af3c884d02e864B182aD9A34EE414C36C',\n  [ChainId.OASISETH_TEST]: '',\n  [ChainId.HECO_TESTNET]: ''\n}\n// 平台币\nexport const ECOSYSTEM_TOKEN_ADDRESS = SUSHI_ADDRESS","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS[tokenA.chainId],\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      // console.log(amount, route.input);\n      \n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Token  } from './token'\nimport JSBI from 'jsbi'\nimport {Decimal} from 'decimal.js'\n\n\n\nexport class AttenuationReward {\n\n  public readonly startBlock: number //开始\n  public readonly zooPerBlock: JSBI\n\n  constructor(args:{ startBlock:number,zooPerBlock:JSBI,halfAttenuationCycle:number} ){\n    ({\n      startBlock: this.startBlock,\n      zooPerBlock: this.zooPerBlock,\n    } = args);\n\n  }\n\n\n\n    public getZooRewardBetween(start: number,end :number) : Decimal {\n      let getZooReardFromStart = (end:number): Decimal=>{\n\n        if( start< this.startBlock || end < this.startBlock || start > end) {\n          return new Decimal(0)\n        }\n       \n        const re  = new Decimal(this.zooPerBlock.toString(10)).mul(new Decimal(end.toString(10)).sub(new Decimal(start.toString(10))))\n        \n        return re\n       }\n\n      return getZooReardFromStart(end).sub(getZooReardFromStart(start)) \n    \n    }\n\n}\n\n\nexport class StakePool {\n  public readonly token0!: Token\n  public readonly token1!: Token\n  public readonly token0Balance!: JSBI\n  public readonly token1Balance!: JSBI\n\n  public readonly lpAddress!: string\n  public readonly totalLp!: JSBI \n  public readonly totalLpInPark!: JSBI \n  public readonly rewardEffect!: number // 奖励系数 *10000\n // 奖励系数 *10000\n  public readonly lastRewardBlock!: number // 奖励系数 *10000\n // 当前zoo余额\n  public readonly rewardConfig!: AttenuationReward // 奖池配置\n  public readonly myCurrentLp!: JSBI\n  public readonly myLpBalance!: JSBI\n  public readonly myReward!: JSBI\n  public readonly pid!: number\n\n\n  constructor(data: Partial<StakePool>) {\n    Object.assign(this, data);\n  }\n\n  public  getDayReturn(currBlockNo:number,rewardPrice :number,token0Price :number,token1Price:number) : Decimal {\n    // one day ≈  21600 block\n    if(JSBI.greaterThan(this.totalLpInPark,JSBI.BigInt(0))) {\n      //const oneDayReward = JSBI.divide(JSBI.BigInt(this.rewardConfig.getZooRewardBetween(currBlockNo,currBlockNo + 21600)) ,this.totalLpInPark)\n      const oneDayReward = new  Decimal(this.rewardConfig.getZooRewardBetween(currBlockNo,currBlockNo + 21600).toString()).div( new Decimal(this.totalLp.toString(10)))\n      //       oneDayReward Price /OneDay reward * 100000\n      // 0.3% fee\n\n     return oneDayReward.mul(new Decimal(rewardPrice)).div(  (new Decimal(this.token0Balance.toString(10)).mul(token0Price).div(new Decimal(this.totalLpInPark.toString(10)) ) ).add(  \n        new Decimal(this.token1Balance.toString(10)).mul(token1Price).div(new Decimal(this.totalLpInPark.toString(10)) ) \n      ))\n    } else{\n      return new Decimal(0)\n    }\n  }\n\n}\n\nexport function jsbiFloor (val:number) {\n  return JSBI.BigInt(Math.floor(val))\n}","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, IsNative, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = IsNative(trade.inputAmount.currency)\n    const etherOut = IsNative(trade.outputAmount.currency)\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","INIT_CODE_HASH","FACTORY_ADDRESS","MAINNET","ROPSTEN","RINKEBY","KOVAN","FANTOM","FANTOM_TESTNET","MATIC","MATIC_TESTNET","XDAI","BSC","BSC_TESTNET","ARBITRUM","MOONBASE","AVALANCHE","OKCHAIN_TEST","OKCHAIN","FUJI","HECO","HECO_TESTNET","OASISETH_MAIN","OASISETH_TEST","BOBA_MAIN","BOBA_TEST","ROUTER_ADDRESS","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","ZOO_SWAP_MINING_ADDRESS","ZOO_PARK_EXT_PID","ZOO_PARK_EXT_ADDRESS","ZOO_ZAP_ADDRESS","ZOO_MINI_PARK_ADDRESS","MASTERCHEF_ADDRESS","BAR_ADDRESS","MAKER_ADDRESS","TIMELOCK_ADDRESS","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","getNativeCurrency","chainId","NATIVE","getNativeCurrencySymbol","nativeCurrency","getNativeCurrencyName","getSymbol","getName","ETHER","GÖRLI","FTM","BNB","GLMR","AVAX","OKT","HT","ROSE","IsNative","currency","values","indexOf","Token","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","SUSHI","BLING","DefaultChainToken","DAI","ZOO","USDT","BTC","ETH","OKB","ETHK","WOKT","YUZU","PETAL","TULIP","DUNE","WBTC","HBTC","WHT","HUSD","MDX","BAG","HFIL","HLTC","BXH","TRIBE","AAVE","UNI","FEI","SNX","YFI","LINK","MAKER","COMP","BAL","WETH","SUSHI_ADDRESS","ECOSYSTEM_TOKEN_ADDRESS","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","AttenuationReward","args","startBlock","zooPerBlock","getZooRewardBetween","start","end","getZooReardFromStart","re","mul","sub","StakePool","data","assign","getDayReturn","currBlockNo","rewardPrice","totalLpInPark","oneDayReward","rewardConfig","totalLp","token0Balance","token1Balance","jsbiFloor","val","Math","floor","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}